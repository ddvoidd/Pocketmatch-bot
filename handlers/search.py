from telegram.ext import MessageHandler, CallbackQueryHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from keyboards import get_main_menu_keyboard

class SearchManager:
    def __init__(self):
        self.user_searches = {}

    def get_next_profile(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞"""
        if user_id not in self.user_searches:
            return None

        search_data = self.user_searches[user_id]
        if search_data['current_index'] >= len(search_data['profiles']):
            return None

        profile = search_data['profiles'][search_data['current_index']]
        search_data['current_index'] += 1
        return profile

    def start_search(self, user_id, profiles):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        self.user_searches[user_id] = {
            'current_index': 0,
            'profiles': profiles
        }

search_manager = SearchManager()

async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –¢–û–õ–¨–ö–û –∏–∑ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    db = context.bot_data['db']
    user_id = update.effective_user.id

    if not db.profile_exists(user_id):
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=get_main_menu_keyboard()
        )
        return

    profile = db.get_profile(user_id)
    if not profile['is_active']:
        await update.message.reply_text(
            "‚ùå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –í–∫–ª—é—á–∏ –µ–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    profiles = db.find_profiles_for_user(user_id)

    if not profiles:
        await update.message.reply_text(
            f"üòî –í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ ({profile['city']}) –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ - –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ - —á–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É!",
            reply_markup=get_main_menu_keyboard()
        )
        return

    search_manager.start_search(user_id, profiles)

    await show_next_profile(update, context, user_id)

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É"""
    if user_id is None:
        user_id = update.effective_user.id

    profile = search_manager.get_next_profile(user_id)

    if not profile:
        db = context.bot_data['db']
        current_profile = db.get_profile(user_id)

        if hasattr(update, 'callback_query') and update.callback_query:
            try:
                await update.callback_query.message.reply_text(
                    f"üéâ –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {current_profile['city']}! "
                    f"–ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ - –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.",
                    reply_markup=get_main_menu_keyboard()
                )
            except:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {current_profile['city']}! "
                         f"–ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ - –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await update.message.reply_text(
                f"üéâ –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {current_profile['city']}! "
                f"–ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ - –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.",
                reply_markup=get_main_menu_keyboard()
            )
        return

    gender_display = {
        'male': 'üë® –ü–∞—Ä–µ–Ω—å',
        'female': 'üë© –î–µ–≤—É—à–∫–∞',
        'other': 'üîÆ –î—Ä—É–≥–æ–µ'
    }.get(profile['gender'], 'üîÆ –î—Ä—É–≥–æ–µ')

    profile_text = (
        f"üë§ {profile['name']}, {profile['age']}\n"
        f"‚öß {gender_display}\n"
        f"üèô {profile['city']}\n"
        f"üìñ {profile['bio'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"üíù –ò—â–µ—Ç: {get_target_display(profile['target_gender'])}"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{profile['user_id']}"),
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="next")
        ],
        [
            InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_search")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update, 'callback_query') and update.callback_query:
        try:
            await update.callback_query.message.delete()
        except:
            pass

        if profile['photos']:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=profile['photos'][0],
                caption=profile_text,
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=profile_text,
                reply_markup=reply_markup
            )
    else:
        if profile['photos']:
            await update.message.reply_photo(
                photo=profile['photos'][0],
                caption=profile_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                profile_text,
                reply_markup=reply_markup
            )

async def handle_search_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–æ–∏—Å–∫–µ"""
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = query.from_user.id
    db = context.bot_data['db']

    if data == 'next':
        await show_next_profile(update, context, user_id)

    elif data == 'stop_search':
        try:
            await query.message.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=user_id,
            text="‚èπÔ∏è –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

    elif data.startswith('like_'):
        target_user_id = int(data.split('_')[1])

        is_match = db.add_like(user_id, target_user_id)

        try:
            await query.message.delete()
        except:
            pass

        if is_match:
            from handlers.notifications import send_match_notification
            await send_match_notification(context, user_id, target_user_id)

            await context.bot.send_message(
                chat_id=user_id,
                text="üéâ –£ –≤–∞—Å –º—ç—Ç—á! –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="next")]])
            )
        else:
            from handlers.notifications import send_like_notification
            await send_like_notification(context, target_user_id, user_id)

            await context.bot.send_message(
                chat_id=user_id,
                text="‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—è—Ç –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é - –±—É–¥–µ—Ç –º—ç—Ç—á!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ", callback_data="next")]])
            )

def get_target_display(target_gender):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç '–∫–æ–≥–æ –∏—â–µ—Ç'"""
    displays = {
        'male': 'üë® –ø–∞—Ä–Ω—è',
        'female': 'üë© –¥–µ–≤—É—à–∫—É',
        'all': 'üë• –≤—Å–µ—Ö'
    }
    return displays.get(target_gender, 'üë• –≤—Å–µ—Ö')

search_handler = MessageHandler(filters.Regex('^(üëÄ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—É)$'), start_search)
search_actions_handler = CallbackQueryHandler(handle_search_actions, pattern="^(like_|next|stop_search)")