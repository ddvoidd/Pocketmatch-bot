from telegram.ext import CommandHandler, MessageHandler, filters
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from keyboards import get_main_menu_keyboard, get_gender_keyboard, get_target_gender_keyboard, get_cancel_keyboard, get_photo_keyboard, get_skip_keyboard, get_photo_only_keyboard

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = context.bot_data['db']

    if not db.user_exists(user.id):
        db.add_user(user.id, user.username, user.first_name, user.last_name)

    if db.profile_exists(user.id):
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "üéâ –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data['registration_step'] = 'name'

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get('registration_step')

    if context.user_data.get('adding_photo') or context.user_data.get('managing_photos'):
        from handlers.profile import handle_photo_addition
        await handle_photo_addition(update, context)
        return

    if step == 'photo' and update.message.photo:
        photo = update.message.photo[-1]
        photo_file_id = photo.file_id

        db = context.bot_data['db']
        user_id = update.effective_user.id

        success = db.add_photo_to_profile(user_id, photo_file_id)

        if success:
            profile = db.get_profile(user_id)
            photo_count = len(profile['photos'])

            message_text = f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –£ —Ç–µ–±—è {photo_count}/1 —Ñ–æ—Ç–æ"

            message_text += "\n\n–ù–∞–∂–º–∏ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å!"

            await update.message.reply_text(
                message_text,
                reply_markup=get_photo_keyboard()
            )
            return

        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_photo_only_keyboard()
            )
            return

    return

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get('registration_step')
    text = update.message.text

    print(f"DEBUG: Step={step}, Text='{text}'")

    if text == '‚ùå –û—Ç–º–µ–Ω–∞':
        context.user_data.clear()
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    if text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é':
        db = context.bot_data['db']
        user_id = update.effective_user.id

        profile = db.get_profile(user_id)
        photo_count = len(profile['photos'])

        if photo_count == 0:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ:",
                reply_markup=get_photo_only_keyboard()
            )
            return

        gender_display = {
            'male': 'üë® –ú—É–∂—Å–∫–æ–π',
            'female': 'üë© –ñ–µ–Ω—Å–∫–∏–π',
            'other': 'üîÆ –î—Ä—É–≥–æ–π'
        }.get(context.user_data['gender'], 'üîÆ –î—Ä—É–≥–æ–π')

        target_display = {
            'male': 'üë® –ü–∞—Ä–Ω—è',
            'female': 'üë© –î–µ–≤—É—à–∫—É',
            'all': 'üë• –í—Å–µ—Ö'
        }.get(context.user_data['target_gender'], 'üë• –í—Å–µ—Ö')

        profile_text = (
            f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {context.user_data['name']}! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üë§ {context.user_data['name']}, {context.user_data['age']}\n"
            f"‚öß {gender_display}\n"
            f"üéØ –ò—â—É: {target_display}\n"
            f"üèô {context.user_data['city']}\n"
            f"üì∏ –§–æ—Ç–æ: {photo_count} —à—Ç.\n"
            f"üìñ {profile['bio'] if profile['bio'] else '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'}\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—ã, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É **üëÄ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—É**"
        )

        if photo_count > 0:
            await update.message.reply_photo(
                photo=profile['photos'][0],
                caption=profile_text,
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                profile_text,
                reply_markup=get_main_menu_keyboard()
            )

        context.user_data.clear()
        return

    if step:
        if step == 'name':
            if len(text) < 2:
                await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return

            context.user_data['name'] = text
            context.user_data['registration_step'] = 'age'
            await update.message.reply_text(
                f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}! üëã\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
            )
            return

        elif step == 'age':
            try:
                age = int(text)
                if age < 16:
                    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ 16+. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
                    return
                if age > 100:
                    await update.message.reply_text("–°–µ—Ä—å–µ–∑–Ω–æ? üòÑ –ù–∞–∑–æ–≤–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
                    return
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
                return

            context.user_data['age'] = age
            context.user_data['registration_step'] = 'gender'
            await update.message.reply_text(
                "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?",
                reply_markup=get_gender_keyboard()
            )
            return

        elif step == 'gender':
            gender_map = {
                'üë® –ú—É–∂—Å–∫–æ–π': 'male',
                'üë© –ñ–µ–Ω—Å–∫–∏–π': 'female',
                'üîÆ –î—Ä—É–≥–æ–π': 'other'
            }
            gender = gender_map.get(text, 'other')
            context.user_data['gender'] = gender
            context.user_data['registration_step'] = 'target_gender'
            await update.message.reply_text(
                "–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?",
                reply_markup=get_target_gender_keyboard()
            )
            return

        elif step == 'target_gender':
            target_map = {
                'üë® –ü–∞—Ä–Ω—è': 'male',
                'üë© –î–µ–≤—É—à–∫—É': 'female',
                'üë• –í—Å–µ—Ö': 'all'
            }
            target_gender = target_map.get(text, 'all')
            context.user_data['target_gender'] = target_gender
            context.user_data['registration_step'] = 'city'
            await update.message.reply_text(
                "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",
                reply_markup=get_cancel_keyboard()
            )
            return

        elif step == 'city':
            if len(text) < 2:
                await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return

            context.user_data['city'] = text
            context.user_data['registration_step'] = 'bio'
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Ö–æ–±–±–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ –∏—â–µ—à—å):",
                reply_markup=get_skip_keyboard()
            )
            return

        elif step == 'bio':
            bio = text
            if text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' or text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                bio = ""

            db = context.bot_data['db']
            user_id = update.effective_user.id

            db.create_profile(
                user_id=user_id,
                name=context.user_data['name'],
                age=context.user_data['age'],
                gender=context.user_data['gender'],
                target_gender=context.user_data['target_gender'],
                city=context.user_data['city'],
                bio=bio
            )

            context.user_data['registration_step'] = 'photo'
            await update.message.reply_text(
                "üì∏ **–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç—É!**\n\n"
                "üì∑ –§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ.\n\n"
                "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'",
                reply_markup=get_photo_only_keyboard()
            )
            return

    else:
        if context.user_data.get('managing_photos'):
            print(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ managing_photos, —Ç–µ–∫—Å—Ç: {text}")
            from handlers.profile import handle_edit_choice
            await handle_edit_choice(update, context)
            return

        if context.user_data.get('adding_photo'):
            print(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ adding_photo, —Ç–µ–∫—Å—Ç: {text}")
            if text != '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é':
                await update.message.reply_text(
                    "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã:",
                    reply_markup=get_back_to_profile_keyboard()
                )
                return
            else:
                from handlers.profile import handle_profile_actions
                await handle_profile_actions(update, context)
                return

        if text in ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ', '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ']:
            print(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è, —Ç–µ–∫—Å—Ç: {text}")
            from handlers.profile import handle_profile_actions
            await handle_profile_actions(update, context)
            return

        if text in ['‚úèÔ∏è –ò–º—è', 'üéÇ –í–æ–∑—Ä–∞—Å—Ç', '‚öß –ü–æ–ª', 'üéØ –ö–æ–≥–æ –∏—â—É', 'üèô –ì–æ—Ä–æ–¥', 'üìñ –û —Å–µ–±–µ']:
            from handlers.profile import handle_edit_choice
            await handle_edit_choice(update, context)
            return

        if text in ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É', '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']:
            from handlers.settings import handle_settings_actions
            await handle_settings_actions(update, context)
            return

        if text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
            from handlers.profile import show_profile
            await show_profile(update, context)
            return

        if text == 'üëÄ –ò—Å–∫–∞—Ç—å –ø–∞—Ä—É':
            from handlers.search import start_search
            await start_search(update, context)
            return

        if text == 'üíå –ú–æ–∏ –º—ç—Ç—á–∏':
            from handlers.matches import show_matches
            await show_matches(update, context)
            return

        if context.user_data.get('editing_field'):
            from handlers.profile import handle_edit_input
            await handle_edit_input(update, context)
            return

        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=get_main_menu_keyboard()
        )

start_handler = CommandHandler('start', start_command)
text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
photo_handler = MessageHandler(filters.PHOTO, handle_photo)