from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from keyboards import get_main_menu_keyboard

async def send_like_notification(context: ContextTypes.DEFAULT_TYPE, to_user_id: int, from_user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ"""
    db = context.bot_data['db']

    from_profile = db.get_profile(from_user_id)
    if not from_profile:
        return

    gender_text = {
        'male': '–ø–∞—Ä–Ω—é',
        'female': '–¥–µ–≤—É—à–∫–µ',
        'other': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    }.get(from_profile['gender'], '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

    notification_text = (
        f"üíù –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {gender_text}!\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —ç—Ç–æ?"
    )

    keyboard = [
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —ç—Ç–æ", callback_data=f"view_liker_{from_user_id}")],
        [InlineKeyboardButton("üíå –ú–æ–∏ –ª–∞–π–∫–∏", callback_data="my_likes")]
    ]

    await context.bot.send_message(
        chat_id=to_user_id,
        text=notification_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_match_notification(context: ContextTypes.DEFAULT_TYPE, user1_id: int, user2_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º—ç—Ç—á–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    db = context.bot_data['db']

    user1_profile = db.get_profile(user1_id)
    user2_profile = db.get_profile(user2_id)

    if user1_profile and user2_profile:
        with db.get_connection() as conn:
            result1 = conn.execute('SELECT username FROM users WHERE user_id = ?', (user1_id,))
            user1_data = result1.fetchone()
            user1_username = user1_data['username'] if user1_data else None

            result2 = conn.execute('SELECT username FROM users WHERE user_id = ?', (user2_id,))
            user2_data = result2.fetchone()
            user2_username = user2_data['username'] if user2_data else None

        match_text1 = (
            f"üéâ –£ –≤–∞—Å –º—ç—Ç—á —Å {user2_profile['name']}!\n\n"
            f"üë§ {user2_profile['name']}, {user2_profile['age']}\n"
            f"üèô {user2_profile['city']}\n\n"
            f"üí¨ –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!"
        )

        keyboard1 = []
        if user2_username:
            keyboard1.append([InlineKeyboardButton(
                f"üíå –ù–∞–ø–∏—Å–∞—Ç—å {user2_profile['name']}",
                url=f"https://t.me/{user2_username}"
            )])
        else:
            keyboard1.append([InlineKeyboardButton(
                "üíå –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                callback_data=f"no_username_{user2_id}"
            )])

        match_text2 = (
            f"üéâ –£ –≤–∞—Å –º—ç—Ç—á —Å {user1_profile['name']}!\n\n"
            f"üë§ {user1_profile['name']}, {user1_profile['age']}\n"
            f"üèô {user1_profile['city']}\n\n"
            f"üí¨ –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!"
        )

        keyboard2 = []
        if user1_username:
            keyboard2.append([InlineKeyboardButton(
                f"üíå –ù–∞–ø–∏—Å–∞—Ç—å {user1_profile['name']}",
                url=f"https://t.me/{user1_username}"
            )])
        else:
            keyboard2.append([InlineKeyboardButton(
                "üíå –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                callback_data=f"no_username_{user1_id}"
            )])

        try:
            if user2_profile['photos']:
                await context.bot.send_photo(
                    chat_id=user1_id,
                    photo=user2_profile['photos'][0],
                    caption=match_text1,
                    reply_markup=InlineKeyboardMarkup(keyboard1)
                )
            else:
                await context.bot.send_message(
                    chat_id=user1_id,
                    text=match_text1,
                    reply_markup=InlineKeyboardMarkup(keyboard1)
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user1_id}: {e}")

        try:
            if user1_profile['photos']:
                await context.bot.send_photo(
                    chat_id=user2_id,
                    photo=user1_profile['photos'][0],
                    caption=match_text2,
                    reply_markup=InlineKeyboardMarkup(keyboard2)
                )
            else:
                await context.bot.send_message(
                    chat_id=user2_id,
                    text=match_text2,
                    reply_markup=InlineKeyboardMarkup(keyboard2)
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user2_id}: {e}")

async def handle_notification_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = query.from_user.id
    db = context.bot_data['db']

    if data.startswith('view_liker_'):
        from_user_id = int(data.split('_')[2])
        from_profile = db.get_profile(from_user_id)

        if from_profile:
            with db.get_connection() as conn:
                result = conn.execute('SELECT username FROM users WHERE user_id = ?', (from_user_id,))
                user_data = result.fetchone()
                from_username = user_data['username'] if user_data else None

            gender_display = {
                'male': 'üë® –ü–∞—Ä–µ–Ω—å',
                'female': 'üë© –î–µ–≤—É—à–∫–∞',
                'other': 'üîÆ –î—Ä—É–≥–æ–µ'
            }.get(from_profile['gender'], 'üîÆ –î—Ä—É–≥–æ–µ')

            target_display = {
                'male': 'üë® –ø–∞—Ä–Ω—è',
                'female': 'üë© –¥–µ–≤—É—à–∫—É',
                'all': 'üë• –≤—Å–µ—Ö'
            }.get(from_profile['target_gender'], 'üë• –≤—Å–µ—Ö')

            profile_text = (
                f"üë§ {from_profile['name']}, {from_profile['age']}\n"
                f"‚öß {gender_display}\n"
                f"üèô {from_profile['city']}\n"
                f"üìñ {from_profile['bio'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üíù –ò—â–µ—Ç: {target_display}\n\n"
                f"üíù –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!"
            )

            has_liked = db.has_liked(user_id, from_user_id)

            is_match = db.get_match(user_id, from_user_id)

            print(f"üîç DEBUG view_liker:")
            print(f"   - user_id: {user_id}")
            print(f"   - from_user_id: {from_user_id}")
            print(f"   - has_liked: {has_liked}")
            print(f"   - is_match: {is_match}")

            keyboard = []

            if not is_match and not has_liked:
                print("üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –õ–∞–π–∫–Ω—É—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                keyboard.append([
                    InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç—å –≤–∑–∞–º–µ–Ω", callback_data=f"like_back_{from_user_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{from_user_id}")
                ])
            elif is_match:
                print("üîç –£–∂–µ –µ—Å—Ç—å –º—ç—Ç—á, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–ø–∏—Å–∞—Ç—å")
                profile_text += "\n\nüéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!"
                if from_username:
                    keyboard.append([InlineKeyboardButton(
                        f"üíå –ù–∞–ø–∏—Å–∞—Ç—å {from_profile['name']}",
                        url=f"https://t.me/{from_username}"
                    )])
                else:
                    keyboard.append([InlineKeyboardButton(
                        "üíå –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        callback_data=f"no_username_{from_user_id}"
                    )])
            elif has_liked:
                print("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                profile_text += "\n\n‚ù§Ô∏è –í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞!"

            keyboard.extend([
                [InlineKeyboardButton("üíå –ú–æ–∏ –ª–∞–π–∫–∏", callback_data="my_likes")],
                [InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])

            try:
                await query.message.delete()
            except:
                pass

            if from_profile['photos']:
                try:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=from_profile['photos'][0],
                        caption=profile_text,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=profile_text,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=profile_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            await query.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    elif data.startswith('like_back_'):
        target_user_id = int(data.split('_')[2])

        print(f"üîç DEBUG like_back:")
        print(f"   - user_id: {user_id}")
        print(f"   - target_user_id: {target_user_id}")

        already_liked = db.has_liked(user_id, target_user_id)

        if already_liked:
            await query.answer("‚ùå –í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return

        is_match = db.add_like(user_id, target_user_id)

        print(f"üîç –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞ - is_match: {is_match}")

        try:
            await query.message.delete()
        except:
            pass

        if is_match:
            await send_match_notification(context, user_id, target_user_id)

            await context.bot.send_message(
                chat_id=user_id,
                text="üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –º—ç—Ç—á! –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"chat_{target_user_id}")
                ]])
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ù§Ô∏è –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∞–π–∫–æ–º! –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üíå –ú–æ–∏ –ª–∞–π–∫–∏", callback_data="my_likes")
                ]])
            )

    elif data.startswith('reject_'):
        target_user_id = int(data.split('_')[1])

        try:
            await query.message.delete()
        except:
            pass

        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –õ–∞–π–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫!",
            reply_markup=get_main_menu_keyboard()
        )

    elif data == 'my_likes':
        from handlers.matches import show_matches
        try:
            await query.message.delete()
        except:
            pass
        await show_matches(update, context)

    elif data == 'back_to_menu':
        try:
            await query.message.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=user_id,
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

    elif data.startswith('chat_'):
        target_user_id = int(data.split('_')[1])

        with db.get_connection() as conn:
            result = conn.execute('SELECT username FROM users WHERE user_id = ?', (target_user_id,))
            user_data = result.fetchone()
            target_username = user_data['username'] if user_data else None

        target_profile = db.get_profile(target_user_id)

        if target_profile and target_username:
            try:
                await query.message.delete()
            except:
                pass
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üíå –ù–∞–ø–∏—à–∏ {target_profile['name']} –≤ Telegram:\n\n"
                     f"üëâ @{target_username}",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username", show_alert=True)

    elif data.startswith('no_username_'):
        target_user_id = int(data.split('_')[2])
        target_profile = db.get_profile(target_user_id)

        try:
            await query.message.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"üíå –ù–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å {target_profile['name']} –Ω–∞–ø—Ä—è–º—É—é\n\n"
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username\n\n"
                f"–ü–æ–ø—Ä–æ—Å–∏ {target_profile['name']} —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:\n"
                f"1. –û—Ç–∫—Ä–æ–π Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                f"2. –í—ã–±–µ—Ä–∏ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n"
                f"3. –£—Å—Ç–∞–Ω–æ–≤–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username\n\n"
                f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é!"
            ),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–∞–π–∫–∞–º", callback_data="back_to_likes")]])
        )

    elif data == 'back_to_likes':
        from handlers.matches import show_matches
        try:
            await query.message.delete()
        except:
            pass
        await show_matches(update, context)

notification_actions_handler = CallbackQueryHandler(
    handle_notification_actions,
    pattern="^(view_liker_|like_back_|reject_|my_likes|back_to_menu|chat_|no_username_|back_to_likes)"
)